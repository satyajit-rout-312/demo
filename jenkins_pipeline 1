pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'jdk'
    }
    environment {
        SONAR_SCANNER_HOME = tool 'sonarscanner'
        SONAR_TOKEN = credentials('sonartoken')
        SONAR_PROJECT_KEY = 'pipeline312_pipeline'
        SONAR_ORG = 'pipeline312'
        SONAR_CLOUD_URL = 'https://sonarcloud.io'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/satyajit-rout-312/demo.git'
            }
        }
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('test') {
            steps{
                sh 'mvn test'
            }
        }
        stage('trivy') {
            steps {
                script {
                     // Disable VEX notice
                    env.TRIVY_DISABLE_VEX_NOTICE = 'true'
                    // Run Trivy scan
                    sh """
                    trivy fs --quiet --severity HIGH,CRITICAL --exit-code 1 /usr/bin/trivy
                    """
                }
            }
       }
       stage('SonarCloud Analysis') {
            steps {
                    sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.organization=${SONAR_ORG} \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                
            }
        }
        stage('package') {
            steps{
                sh 'mvn clean package'
            }
        }
        stage('deploy') {
            steps {
                 withMaven(globalMavenSettingsConfig: 'd545ddb5-ad2b-4fff-97d7-539c1766475e', jdk: 'jdk', maven: 'maven', traceability: true)
                {
                    sh 'mvn deploy'
                }
            }
        }
        stage('Buildandtagdockerimage') {
            steps {
                script {
                     withDockerRegistry(credentialsId: 'dockerid', toolName: 'dockertool') {
                         sh "docker build -t rajkumarsatya/srimage4 ."
                     } 
                }
            }
        }
        stage("push docker image") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerid', toolName: 'dockertool') {
                       sh "docker push  rajkumarsatya/srimage4"
                    }
                } 
            }
        }
    }
    post {
        success {
            slackSend channel: 'project', message: 'project success'
        }
    }
}
